'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RadioButtonLabel = exports.RadioButtonInput = exports.RadioButton = exports.default = undefined;

var _class,
    _temp,
    _jsxFileName = '/Users/baldur/Documents/it2810-webutvikling-h17-prosjekt-3-group-21/mobile-note-taker/node_modules/react-native-simple-radio-button/lib/SimpleRadioButton.js',
    _class2,
    _temp2;

var _Style = require('./Style.js');

var _Style2 = babelHelpers.interopRequireDefault(_Style);

var React = require('react');
var ReactNative = require('react-native');
var Text = ReactNative.Text,
    View = ReactNative.View,
    TouchableOpacity = ReactNative.TouchableOpacity,
    TouchableWithoutFeedback = ReactNative.TouchableWithoutFeedback,
    LayoutAnimation = ReactNative.LayoutAnimation,
    Platform = ReactNative.Platform,
    UIManager = ReactNative.UIManager;
var RadioForm = (_temp = _class = function (_React$Component) {
  babelHelpers.inherits(RadioForm, _React$Component);

  function RadioForm(props) {
    babelHelpers.classCallCheck(this, RadioForm);

    var _this = babelHelpers.possibleConstructorReturn(this, (RadioForm.__proto__ || Object.getPrototypeOf(RadioForm)).call(this, props));

    _this.state = {
      is_active_index: props.initial
    };
    if (Platform.OS === 'android') {
      UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);
    }
    _this._renderButton = _this._renderButton.bind(_this);
    return _this;
  }

  babelHelpers.createClass(RadioForm, [{
    key: 'updateIsActiveIndex',
    value: function updateIsActiveIndex(index) {
      this.setState({ is_active_index: index });
      this.props.onPress(this.props.radio_props[index], index);
    }
  }, {
    key: '_renderButton',
    value: function _renderButton(obj, i) {
      var _this2 = this;

      return React.createElement(RadioButton, {
        accessible: this.props.accessible,
        accessibilityLabel: this.props.accessibilityLabel ? this.props.accessibilityLabel + '|' + i : 'radioButton' + '|' + i,
        testID: this.props.testID ? this.props.testID + '|' + i : 'radioButton' + '|' + i,
        isSelected: this.state.is_active_index === i,
        obj: obj,
        key: i,
        index: i,
        buttonColor: this.state.is_active_index === i ? this.props.selectedButtonColor : this.props.buttonColor,
        buttonSize: this.props.buttonSize,
        buttonOuterSize: this.props.buttonOuterSize,
        labelHorizontal: this.props.labelHorizontal,
        labelColor: this.state.is_active_index === i ? this.props.selectedLabelColor : this.props.labelColor,
        labelStyle: this.props.labelStyle,
        style: this.props.radioStyle,
        animation: this.props.animation,
        disabled: this.props.disabled,
        onPress: function onPress(value, index) {
          _this2.props.onPress(value, index);
          _this2.setState({ is_active_index: index });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 49
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var render_content = false;
      if (this.props.radio_props.length) {
        render_content = this.props.radio_props.map(this._renderButton);
      } else {
        render_content = this.props.children;
      }
      return React.createElement(
        View,
        { style: [_Style2.default.radioFrom, this.props.style, this.props.formHorizontal && _Style2.default.formHorizontal], __source: {
            fileName: _jsxFileName,
            lineNumber: 84
          }
        },
        render_content
      );
    }
  }]);
  return RadioForm;
}(React.Component), _class.defaultProps = {
  radio_props: [],
  initial: 0,
  buttonColor: '#2196f3',
  selectedButtonColor: '#2196f3',
  formHorizontal: false,
  labelHorizontal: true,
  animation: true,
  labelColor: '#000',
  selectedLabelColor: '#000',
  wrapStyle: {},
  disabled: false
}, _temp);
exports.default = RadioForm;
var RadioButton = exports.RadioButton = (_temp2 = _class2 = function (_React$Component2) {
  babelHelpers.inherits(RadioButton, _React$Component2);

  function RadioButton(props) {
    babelHelpers.classCallCheck(this, RadioButton);

    var _this3 = babelHelpers.possibleConstructorReturn(this, (RadioButton.__proto__ || Object.getPrototypeOf(RadioButton)).call(this, props));

    _this3.state = {};
    return _this3;
  }

  babelHelpers.createClass(RadioButton, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return true;
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate() {
      if (this.props.animation) {
        LayoutAnimation.spring();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var c = this.props.children;

      var idSeparator = this.props.idSeparator ? this.props.idSeparator : '|';
      var idSeparatorAccessibilityLabelIndex = this.props.accessibilityLabel ? this.props.accessibilityLabel.indexOf(idSeparator) : -1;
      var idSeparatorTestIdIndex = this.props.testID ? this.props.testID.indexOf(idSeparator) : -1;

      var accessibilityLabel = this.props.accessibilityLabel ? idSeparatorAccessibilityLabelIndex !== -1 ? this.props.accessibilityLabel.substring(0, idSeparatorAccessibilityLabelIndex) : this.props.accessibilityLabel : 'radioButton';
      var testID = this.props.testID ? idSeparatorTestIdIndex !== -1 ? this.props.testID.substring(0, idSeparatorTestIdIndex) : this.props.testID : 'radioButton';

      var accessibilityLabelIndex = this.props.accessibilityLabel && idSeparatorAccessibilityLabelIndex !== -1 ? this.props.accessibilityLabel.substring(idSeparatorAccessibilityLabelIndex + 1) : '';
      var testIDIndex = this.props.testID && testIDIndex !== -1 ? this.props.testID.split(testIDIndex + 1) : '';

      var renderContent = false;
      renderContent = c ? React.createElement(
        View,
        { style: [_Style2.default.radioWrap, this.props.style, !this.props.labelHorizontal && _Style2.default.labelVerticalWrap], __source: {
            fileName: _jsxFileName,
            lineNumber: 139
          }
        },
        c
      ) : React.createElement(
        View,
        { style: [_Style2.default.radioWrap, this.props.style, !this.props.labelHorizontal && _Style2.default.labelVerticalWrap], __source: {
            fileName: _jsxFileName,
            lineNumber: 147
          }
        },
        React.createElement(RadioButtonInput, babelHelpers.extends({}, this.props, {
          accessibilityLabel: accessibilityLabel + 'Input' + accessibilityLabelIndex,
          testID: testID + 'Input' + testIDIndex, __source: {
            fileName: _jsxFileName,
            lineNumber: 152
          }
        })),
        React.createElement(RadioButtonLabel, babelHelpers.extends({}, this.props, {
          accessibilityLabel: accessibilityLabel + 'Label' + accessibilityLabelIndex,
          testID: testID + 'Label' + testIDIndex, __source: {
            fileName: _jsxFileName,
            lineNumber: 155
          }
        }))
      );
      return React.createElement(
        View,
        { style: this.props.wrapStyle, __source: {
            fileName: _jsxFileName,
            lineNumber: 161
          }
        },
        renderContent
      );
    }
  }]);
  return RadioButton;
}(React.Component), _class2.defaultProps = {
  isSelected: false,
  buttonColor: '#2196f3',
  selectedButtonColor: '#2196f3',
  labelHorizontal: true,
  disabled: false,
  idSeparator: '|'
}, _temp2);

var RadioButtonInput = exports.RadioButtonInput = function (_React$Component3) {
  babelHelpers.inherits(RadioButtonInput, _React$Component3);

  function RadioButtonInput(props) {
    babelHelpers.classCallCheck(this, RadioButtonInput);

    var _this4 = babelHelpers.possibleConstructorReturn(this, (RadioButtonInput.__proto__ || Object.getPrototypeOf(RadioButtonInput)).call(this, props));

    _this4.state = {
      isSelected: false,
      buttonColor: props.buttonColor || '#2196f3'
    };
    return _this4;
  }

  babelHelpers.createClass(RadioButtonInput, [{
    key: 'render',
    value: function render() {
      var _this5 = this;

      var innerSize = { width: 20, height: 20, borderRadius: 20 / 2 };
      var outerSize = { width: 20 + 10, height: 20 + 10, borderRadius: (20 + 10) / 2 };
      if (this.props.buttonSize) {
        innerSize.width = this.props.buttonSize;
        innerSize.height = this.props.buttonSize;
        innerSize.borderRadius = this.props.buttonSize / 2;
        outerSize.width = this.props.buttonSize + 10;
        outerSize.height = this.props.buttonSize + 10;
        outerSize.borderRadius = (this.props.buttonSize + 10) / 2;
      }
      if (this.props.buttonOuterSize) {
        outerSize.width = this.props.buttonOuterSize;
        outerSize.height = this.props.buttonOuterSize;
        outerSize.borderRadius = this.props.buttonOuterSize / 2;
      }
      var outerColor = this.props.buttonOuterColor;
      var borderWidth = this.props.borderWidth || 3;
      var innerColor = this.props.buttonInnerColor;
      if (this.props.buttonColor) {
        outerColor = this.props.buttonColor;
        innerColor = this.props.buttonColor;
      }
      var c = React.createElement(View, { style: [_Style2.default.radioNormal, this.props.isSelected && _Style2.default.radioActive, this.props.isSelected && innerSize, this.props.isSelected && { backgroundColor: innerColor }], __source: {
          fileName: _jsxFileName,
          lineNumber: 200
        }
      });
      var radioStyle = [_Style2.default.radio, {
        borderColor: outerColor,
        borderWidth: borderWidth
      }, this.props.buttonStyle, outerSize];

      if (this.props.disabled) {
        return React.createElement(
          View,
          { style: this.props.buttonWrapStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 219
            }
          },
          React.createElement(
            View,
            { style: radioStyle, __source: {
                fileName: _jsxFileName,
                lineNumber: 220
              }
            },
            c
          )
        );
      }

      return React.createElement(
        View,
        { style: this.props.buttonWrapStyle, __source: {
            fileName: _jsxFileName,
            lineNumber: 228
          }
        },
        React.createElement(
          TouchableOpacity,
          {
            accessible: this.props.accessible,
            accessibilityLabel: this.props.accessibilityLabel,
            testID: this.props.testID,
            style: radioStyle,
            onPress: function onPress() {
              _this5.props.onPress(_this5.props.obj.value, _this5.props.index);
            }, __source: {
              fileName: _jsxFileName,
              lineNumber: 229
            }
          },
          c
        )
      );
    }
  }]);
  return RadioButtonInput;
}(React.Component);

RadioButtonInput.defaultProps = {
  buttonInnerColor: '#2196f3',
  buttonOuterColor: '#2196f3',
  disabled: false
};

var RadioButtonLabel = exports.RadioButtonLabel = function (_React$Component4) {
  babelHelpers.inherits(RadioButtonLabel, _React$Component4);

  function RadioButtonLabel(props) {
    babelHelpers.classCallCheck(this, RadioButtonLabel);

    var _this6 = babelHelpers.possibleConstructorReturn(this, (RadioButtonLabel.__proto__ || Object.getPrototypeOf(RadioButtonLabel)).call(this, props));

    _this6.state = {
      isSelected: false,
      buttonColor: '#2196f3'
    };
    return _this6;
  }

  babelHelpers.createClass(RadioButtonLabel, [{
    key: 'render',
    value: function render() {
      var _this7 = this;

      return React.createElement(
        TouchableWithoutFeedback,
        {
          accessible: this.props.accessible,
          accessibilityLabel: this.props.accessibilityLabel,
          testID: this.props.testID,
          onPress: function onPress() {
            if (!_this7.props.disabled) {
              _this7.props.onPress(_this7.props.obj.value, _this7.props.index);
            }
          }, __source: {
            fileName: _jsxFileName,
            lineNumber: 259
          }
        },
        React.createElement(
          View,
          { style: [this.props.labelWrapStyle, _Style2.default.labelWrapStyle], __source: {
              fileName: _jsxFileName,
              lineNumber: 268
            }
          },
          React.createElement(
            Text,
            { style: [_Style2.default.radioLabel, !this.props.labelHorizontal && _Style2.default.labelVertical, { color: this.props.labelColor }, this.props.labelStyle], __source: {
                fileName: _jsxFileName,
                lineNumber: 272
              }
            },
            this.props.obj.label
          )
        )
      );
    }
  }]);
  return RadioButtonLabel;
}(React.Component);